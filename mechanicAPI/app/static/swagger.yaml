swagger: '2.0'
info:
  title: "Mechanic Shop API"
  description: "This is a API to manage a mechanic's shop"
  version: "1.0.0"
host: "127.0.0.1:5000"
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"
securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header

#* Mechanics Endpoints
paths: 
  /mechanics/login:
    post:
        tags:
          - "Mechanics"
        summary: "POST login with credentials (email, password) if valid, login token will be minted and returned. (generates token)"
        description: "Validates mechanic credentials, generates and returns a number specific token"
        parameters:
          - in: "body"
            name: "body"
            description: "Login credentials"
            required: true
            schema:
              $ref: "#/definitions/LoginCredentials"
        responses:
          200:
            description: "Successful Login"
            schema:
              $ref: "#/definitions/LoginResponse"
            examples:
              application/json:
                token: "kjsbvpluahsenASDKLJASDKBASKDHI..."
                message: "Login successful"
                status: "success"

  /mechanics: # endpoint
    post: # request type
        tags:
          - "Mechanics"
        summary: "Endpoint to create a new mechanic"
        description: "Send a JSON payload including mechanic information to create a new mechanic in our database, email must be unique"
        security: []
        parameters:
          - in: "body"
            name: "body"
            description: "Information to create a new mechanic"
            required: true
            schema:
              $ref: "#/definitions/CreateMechanicPayload"
        responses:
          200:
            description: "Created Mechanic Successfully"
            schema:
              $ref: "#/definitions/AllMechanics"
            examples:
              application/json:
                address: "123 Main St"
                email: "johndoe@gmail.com"
                id: 1
                name: "John Doe"
                password: "password123"

    get:
        tags:
          - "Mechanics"
        summary: "Returns all Mechanics"
        description: "Endpoint to retrieve an array of all mechanics in the system"
        security: []
        parameters:
          - in: query
            name: page
            type: integer
            description: "Page number for pagination (optional)"
          - in: query
            name: per_page
            type: integer
            default: 10
            description: Items perpage (default 10)
        responses:
          200:
            description: "Successful Mechanic Creation"
            schema:
              $ref: "#/definitions/AllMechanics"
            examples:
              application/json:
                address: "123 Main St"
                email: "johndoe@gmail.com"
                id: 1
                name: "John Doe"
                password: "password123"
    
    put:
        tags:
          - "Mechanics"
        summary: "Endpoit to update a mechanic"
        description: "Endpoint to update a mechanic, this is a token authenticated route, and the mechanic must be logged in to update their account"
        security:
          - bearerAuth: []
        parameters:
          - in: 'body'
            name: 'body'
            description: "information required to update a mechanic"
            required: true
            schema:
              $ref: "#/definitions/UpdateMechanicPayload"
        responses:
          200:
            description: "Successfully updated mechanic"
            schema:
              $ref: "#/definitions/UpdateMechanicResponse"
            examples:
              application/json:
                address: "123 Main St"
                email: "johndoe@gmail.com"
                id: 1
                name: "John Doe"
                password: "password123"

    delete:
        tags:
          - "Mechanics"
        summary: "Endpoint to delete a mechanic"
        description: "Endpoint to delete a mechanic, Requires token authentication, mechanic must be logged in to delete their account"
        security:
          - bearerAuth: []
        responses:
          200:
            description: "Mechanic Successfully Deleted"
            schema:
              $ref: "#/definitions/DeleteMechanicResponse"
            examples:
              application/json:
                message: "Successfully deleted mechanic"

  /mechanics/{id}:
    get:
        tags:
          - "Mechanics"
        summary: "Returns a specific Mechanic"
        description: "Send a JSON payload including mechanic information to the path parameter coresponding to the mechanic id to retrieve a specific mechanic in the system"
        security: []
        parameters:
          - in: "path"
            name: id # Note thename is the same as in the path
            required: true
            schema:
              type: "integer"
              minimum: 1
            description: "ID of the mechanic to retrieve" 
        responses:
          200:
            description: "Successfully found mechanic"
            schema:
              $ref: "#/definitions/MechanicResponse" 

#* Customers Endpoints

  /customers:
    post:
        tags:
          - "Customers"
        summary: "Endpoint to create a new customer"
        description: "Send a JSON payload including customer information to create a new customer in our database, email must be unique"
        security: []
        parameters:
          - in: "body"
            name: "body"
            description: "Information to create a new customer"
            required: true
            schema:
              $ref: "#/definitions/CreateCustomerPayload"
        responses:
          200:
            description: "Created Customer Successfully"
            schema:
              $ref: "#/definitions/AllCustomers"
            examples:
              application/json:
                email: "johndoe@gmail.com"
                id: 1
                name: "John Doe"
                phone: "1234567890"
                tickets: []
                vehicles: []

    get:
        tags:
          - "Customers"
        summary: "Returns all Customers"
        description: "Endpoint to retrieve an array of all customers in the system"
        security: []
        parameters:
          - in: query
            name: page
            type: integer
            description: "Page number for pagination (optional)"
          - in: query
            name: per_page
            type: integer
            default: 10
            description: Items perpage (default 10)
        responses:
          200:
            description: "Successful Reterival of Customers"
            schema:
              $ref: "#/definitions/AllCustomers"
            examples:
              application/json:
                email: "johndoe@gmail.com"
                id: 1
                name: "John Doe"
                phone: "1234567890"
                tickets: []
                vehicles: []

    put:
        tags:
          - "Customers"
        summary: "Endpoit to update a customer"
        description: "Endpoint to update a customer."
        security:
          - bearerAuth: []
        parameters:
          - in: 'body'
            name: 'body'
            description: "information required to update a customer"
            required: true
            schema:
              $ref: "#/definitions/UpdateCustomerPayload"
        responses:
          200:
            description: "Successfully updated customer"
            schema:
              $ref: "#/definitions/UpdateCustomerResponse"
            examples:
              application/json:
                email: "johndoe@gmail.com"
                id: 1
                name: "John Doe"
                phone: "1234567890"
                tickets: []
                vehicles: []

    delete:
        tags:
          - "Customers"
        summary: "Endpoint to delete a customer"
        description: "Endpoint to delete a custoner."
        security:
          - bearerAuth: []
        responses:
          200:
            description: "Customer Successfully Deleted"
            schema:
              $ref: "#/definitions/DeleteCustomerResponse"
            examples:
              application/json:
                message: "Successfully deleted customer <customer_id>"

  /customers/{id}:
    get:
        tags:
          - "Customers"
        summary: "Returns a specific customer"
        description: "Send a JSON payload including customer information to the path parameter coresponding to the customer id to retrieve a specific customer in the system"
        security: []
        parameters:
          - in: "path"
            name: id # Note thename is the same as in the path
            required: true
            schema:
              type: "integer"
              minimum: 1
            description: "ID of the customer to retrieve" 
        responses:
          200:
            description: "Successfully found customer"
            schema:
              $ref: "#/definitions/CustomerResponse" 

  /customers/search:
    get:
        tags:
          - "Customers"
        summary: Endpoint to search for a customer by name or email.
        description: Pass in customer name or  email as query parameter and receive associated customer.
        parameters:
          - in: query
            name: email
            schema:
              type: string
            description: "Email of the customer to search for"
          - in: query
            name: name
            schema:
              type: string
            description: "Name of the customer to search for"
        responses:
          200:
            description: "Successfully found customer"
            schema:
              $ref: "#/definitions/CustomerListResponse"


#* Part Description Endpoints
  /part-descriptions:
    post:
        tags:
          - "Part Descriptions"
        summary: "Endpoint to create a new part description"
        description: "Send a JSON payload including part description information to create a new part description in our database, email must be unique."
        security: []
        parameters:
          - in: "body"
            name: "body"
            description: "Information to create a new part description"
            required: true
            schema:
              $ref: "#/definitions/CreatePart_DescriptionPayload"
        responses:
          200:
            description: "Created Part Description Successfully"
            schema:
              $ref: "#/definitions/AllPart_Descriptions"
            examples:
              application/json:
                brand: "Flowmaster"
                id: 1
                part name: "After Market Exhaust"
                price: "599.99"

    get:
        tags:
          - "Part Descriptions"
        summary: "Returns all Part Descriptions"
        description: "Endpoint to retrieve an array of all part descriptions in the system"
        security: []
        parameters:
          - in: query
            name: page
            type: integer
            description: "Page number for pagination (optional)"
          - in: query
            name: per_page
            type: integer
            default: 10
            description: Items perpage (default 10)
        responses:
          200:
            description: "Successful reterival of Part Descriptions"
            schema:
              $ref: "#/definitions/AllPart_Descriptions"
            examples:
              application/json:
                brand: "Flowmaster"
                id: 1
                part name: "After Market Exhaust"
                price: "599.99"
    put:
        tags:
          - "Part Descriptions"
        summary: "Endpoit to update a part description"
        description: "Endpoint to update a part description."
        security:
          - bearerAuth: []
        parameters:
          - in: 'body'
            name: 'body'
            description: "information required to update a part description"
            required: true
            schema:
              $ref: "#/definitions/UpdatePart_DescriptionPayload"
        responses:
          200:
            description: "Successfully updated part description"
            schema:
              $ref: "#/definitions/UpdatePart_DescriptionResponse"
            examples:
              application/json:
                brand: "Flowmaster"
                id: 1
                part name: "After Market Exhaust"
                price: "599.99"

    delete:
        tags:
          - "Part Descriptions"
        summary: "Endpoint to delete a part description"
        description: "Endpoint to delete a part description."
        security:
          - bearerAuth: []
        responses:
          200:
            description: "Part Description Successfully Deleted"
            schema:
              $ref: "#/definitions/DeletePart_DescriptionResponse"
            examples:
              application/json:
                message: "Successfully deleted part description"

  /part-descriptions/{id}:
      get:
          tags:
            - "Part Descriptions"
          summary: "Returns a specific part"
          description: "Send a JSON payload including part id to the path parameter to retrieve a specific part in the system"
          security: []
          parameters:
            - in: "path"
              name: id # Note thename is the same as in the path
              required: true
              schema:
                type: "integer"
                minimum: 1
              description: "ID of the part to retrieve" 
          responses:
            200:
              description: "Successfully found part"
              schema:
                $ref: "#/definitions/Part_DescriptionResponse" 

#* Serialized Parts Endpoints
  /serialized-parts:
    post:
        tags:
          - "Serialized Parts"
        summary: "Endpoint to create a new serialized part"
        description: "Send a JSON payload including serialized part information to create a new serialized part in our database, email must be unique"
        security: []
        parameters:
          - in: "body"
            name: "body"
            description: "Information to create a new serialized part"
            required: true
            schema:
              $ref: "#/definitions/CreateSerialized_PartPayload"
        responses:
          200:
            description: "Created Serialized Part Successfully"
            schema:
              $ref: "#/definitions/AllSerialized_Parts"
            examples:
              application/json:
                desc id: 1
                id: 1
                ticket id: 1
    get:
        tags:
          - "Serialized Parts"
        summary: "Returns all Serialized Parts"
        description: "Endpoint to retrieve an array of all serialized parts in the system"
        security: []
        parameters:
          - in: query
            name: page
            type: integer
            description: "Page number for pagination (optional)"
          - in: query
            name: per_page
            type: integer
            default: 10
            description: Items perpage (default 10)
        responses:
          200:
            description: "Successful reterival of serialized parts"
            schema:
              $ref: "#/definitions/AllSerialized_Parts"
            examples:
              application/json:
                desc id: 1
                id: 1
                ticket id: 1
    put:
        tags:
          - "Serialized Parts"
        summary: "Endpoit to update a serialized part"
        description: "Endpoint to update a serialized part."
        security:
          - bearerAuth: []
        parameters:
          - in: 'body'
            name: 'body'
            description: "information required to update a serialized part"
            required: true
            schema:
              $ref: "#/definitions/UpdateSerialized_PartPayload"
        responses:
          200:
            description: "Successfully updated serialized part"
            schema:
              $ref: "#/definitions/UpdateSerialized_PartResponse"
            examples:
              application/json:
                desc id: 1
                id: 1
                ticket id: 1
    delete:
        tags:
          - "Serialized Parts"
        summary: "Endpoint to delete a serialized part"
        description: "Endpoint to delete a serialized part."
        security:
          - bearerAuth: []
        responses:
          200:
            description: "Serialized Part Successfully Deleted"
            schema:
              $ref: "#/definitions/DeleteSerialized_PartResponse"
            examples:
              application/json:
                message: "Successfully deleted serialized part"

  /serialized-parts/{id}:
      get:
          tags:
            - "Serialized Parts"
          summary: "Returns a serialized part"
          description: "Send a JSON payload including serialized part id to the path parameter to retrieve a specific serialized part in the system "
          security: []
          parameters:
            - in: "path"
              name: id # Note thename is the same as in the path
              required: true
              schema:
                type: "integer"
                minimum: 1
              description: "ID of the serialized part to retrieve" 
          responses:
            200:
              description: "Successfully found serialized part"
              schema:
                $ref: "#/definitions/Serialized_PartResponse" 

#* Service Tickets Endpoints
  /service-tickets:
    post:
        tags:
          - "Service Tickets"
        summary: "Endpoint to create a new service ticket"
        description: "Send a JSON payload including service ticket information to create a new service ticket in our database, email must be unique"
        security: []
        parameters:
          - in: "body"
            name: "body"
            description: "Information to create a new service ticket"
            required: true
            schema:
              $ref: "#/definitions/CreateService_TicketPayload"
        responses:
          200:
            description: "Created Service Ticket Successfully"
            schema:
              $ref: "#/definitions/AllService_Tickets"
            examples:
              application/json:
                customer_id: 1
                date: "2023-10-01"
                id: 1
                status: "Completed"
                type: "Oil Change"
                vehicle_id: 1

    get:
        tags:
          - "Service Tickets"
        summary: "Returns all Service Tickets"
        description: "Endpoint to retrieve an array of all service tickets in the system"
        security: []
        parameters:
          - in: query
            name: page
            type: integer
            description: "Page number for pagination (optional)"
          - in: query
            name: per_page
            type: integer
            default: 10
            description: Items perpage (default 10)
        responses:
          200:
            description: "Successful Reterival of Service Tickets"
            schema:
              $ref: "#/definitions/AllService_Tickets"
            examples:
              application/json:
                customer_id: 1
                date: "2023-10-01"
                id: 1
                status: "Completed"
                type: "Oil Change"
                vehicle_id: 1

    put:
        tags:
          - "Service Tickets"
        summary: "Endpoit to update a service ticket"
        description: "Endpoint to update a service ticket."
        security:
          - bearerAuth: []
        parameters:
          - in: 'body'
            name: 'body'
            description: "information required to update a service ticket"
            required: true
            schema:
              $ref: "#/definitions/UpdateService_TicketPayload"
        responses:
          200:
            description: "Successfully updated servie ticket"
            schema:
              $ref: "#/definitions/UpdateService_TicketResponse"
            examples:
              application/json:
                customer_id: 1
                date: "2023-10-01"
                id: 1
                status: "Completed"
                type: "Oil Change"
                vehicle_id: 1


    delete:
        tags:
          - "Service Tickets"
        summary: "Endpoint to delete a service ticket"
        description: "Endpoint to delete a service ticket."
        security:
          - bearerAuth: []
        responses:
          200:
            description: "Service Ticket Successfully Deleted"
            schema:
              $ref: "#/definitions/DeleteService_TicketResponse"
            examples:
              application/json:
                message: "Successfully deleted service ticket."

  /service-tickets/{id}:
      get:
          tags:
            - "Service Tickets"
          summary: "Returns a service ticket"
          description: "Send a JSON payload including service ticket id to the path parameter to retrieve a specific service ticket in the system "
          security: []
          parameters:
            - in: "path"
              name: id # Note thename is the same as in the path
              required: true
              schema:
                type: "integer"
                minimum: 1
              description: "ID of the service ticket to retrieve" 
          responses:
            200:
              description: "Successfully found service ticket"
              schema:
                $ref: "#/definitions/Service_TicketResponse" 

  /service-tickets/{ticket_id}/add-mechanic/{mechanic_id}:
      put:
          tags:
            - "Service Tickets"
          summary: "Adds a mechanic to a service ticket"
          description: "Send a PUT request to the path parameter to add a mechanic to a service ticket"
          security: []
          parameters:
            - in: "path"
              name: ticket_id # Note thename is the same as in the path
              required: true
              schema:
                type: "integer"
                minimum: 1
              description: "ID of the service ticket that the mechanic is being added to." 
            - in: "path"
              name: mechanic_id # Note thename is the same as in the path
              required: true
              schema:
                type: "integer"
                minimum: 1
              description: "ID of the mechanic that is being added to the ticket." 
          responses:
            200:
              description: "Successfully added mechanic to this service ticket"
              schema:
                $ref: "#/definitions/Mechanic_TicketResponse" 

  /service-tickets/{ticket_id}/remove-mechanic/{mechanic_id}:
      put:
          tags:
            - "Service Tickets"
          summary: "Removes a mechanic to a service ticket"
          description: "Send a PUT request to the path parameter to remove a mechanic from a service ticket"
          security: []
          parameters:
            - in: "path"
              name: ticket_id # Note thename is the same as in the path
              required: true
              schema:
                type: "integer"
                minimum: 1
              description: "ID of the service ticket that the mechanic is being removed from." 
            - in: "path"
              name: mechanic_id # Note thename is the same as in the path
              required: true
              schema:
                type: "integer"
                minimum: 1
              description: "ID of the mechanic that is being removed from the ticket." 
          responses:
            200:
              description: "Successfully removed mechanic from this service ticket"
              schema:
                $ref: "#/definitions/RemoveMechanic_TicketResponse" 

#* Vehicles Endpoints
  /vehicles:
    post:
        tags:
          - "Vehicles"
        summary: "Endpoint to create a new vehicle"
        description: "Send a JSON payload including vehicle information to create a new vehicle in our database, email must be unique"
        security: []
        parameters:
          - in: "body"
            name: "body"
            description: "Information to create a new vehicle"
            required: true
            schema:
              $ref: "#/definitions/CreateVehiclePayload"
        responses:
          200:
            description: "Created Vehicle Successfully"
            schema:
              $ref: "#/definitions/AllVehicles"
            examples:
              application/json:
                customer_id: 1
                id: 1
                make: "Toyota"
                model: "Camry"
                

    get:
        tags:
          - "Vehicles"
        summary: "Returns all Vehicles"
        description: "Endpoint to retrieve an array of all vehicles in the system"
        security: []
        parameters:
          - in: query
            name: page
            type: integer
            description: "Page number for pagination (optional)"
          - in: query
            name: per_page
            type: integer
            default: 10
            description: Items perpage (default 10)
        responses:
          200:
            description: "Successful Reterival of Vehicles"
            schema:
              $ref: "#/definitions/AllVehicles"
            examples:
              application/json:
                customer_id: 1
                id: 1
                make: "Toyota"
                model: "Camry"
    put:
        tags:
          - "Vehicles"
        summary: "Endpoit to update a vehicle"
        description: "Endpoint to update a vehicle."
        security:
          - bearerAuth: []
        parameters:
          - in: 'body'
            name: 'body'
            description: "information required to update a vehicle"
            required: true
            schema:
              $ref: "#/definitions/UpdateVehiclePayload"
        responses:
          200:
            description: "Successfully updated vehicle"
            schema:
              $ref: "#/definitions/UpdateVehicleResponse"
            examples:
              application/json:
                customer_id: 1
                id: 1
                make: "Toyota"
                model: "Camry"
    delete:
        tags:
          - "Vehicles"
        summary: "Endpoint to delete a vehicle"
        description: "Endpoint to delete a vechicle."
        security:
          - bearerAuth: []
        responses:
          200:
            description: "Vehicle Successfully Deleted"
            schema:
              $ref: "#/definitions/DeleteVehicleResponse"
            examples:
              application/json:
                message: "Successfully deleted vehicle."

  /vehicles/{id}:
      get:
          tags:
            - "Vehicles"
          summary: "Returns a specific vehicle"
          description: "Send a JSON payload including vehicle id to the path parameter to retrieve a specific vehicle in the system "
          security: []
          parameters:
            - in: "path"
              name: id # Note thename is the same as in the path
              required: true
              schema:
                type: "integer"
                minimum: 1
              description: "ID of the vehicle to retrieve" 
          responses:
            200:
              description: "Successfully found vehicle"
              schema:
                $ref: "#/definitions/VehicleResponse" 

  /vehicles/search:
    get:
        tags:
          - "Vehicles"
        summary: Endpoint to search for a vehicle by make or model.
        description: Pass in vehicle make or model as query parameter and receive associated vehicle(s).
        parameters:
          - in: query
            name: make
            schema:
              type: string
            description: "Make of the vehicle to search for"
          - in: query
            name: model
            schema:
              type: string
            description: "Model of the vehicle to search for"
        responses:
          200:
            description: "Successfully found vehicle"
            schema:
              $ref: "#/definitions/VehicleListResponse"

definitions: 

#* Mechanics
  LoginCredentials:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
    required:
      - email
      - password
  
  LoginResponse:
    type: "object"
    properties:
      token:
        type: "string"
      message:
        type: "string"
      status:
        type: "string"
    required:
      - token
      - message
      - status

  Mechanic:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      address:
        type: "string"
      password:
        type: "string"

  CreateMechanicPayload:
    type: "object"
    properties:
      address:
        type: "string"
      email:
        type: "string"
      name:
        type: "string"
      password:
        type: "string"
      
    required:
      - address
      - email
      - name
      - password

  CreateMechanicResponse:
    type: "object"
    properties:
      address:
        type: "string"
      email:
        type: "string"
      id:
        type: "integer"
      name:
        type: "string"
      password:
        type: "string"


  AllMechanics:
    type: "array"
    items:
      $ref: "#/definitions/Mechanic"
      # properties:
      #   address:
      #     type: "string"
      #   email:
      #     type: "string"
      #   id:
      #     type: "integer"
      #   name:
      #     type: "string"
      #   password:
      #     type: "string"


  UpdateMechanicPayload:
    type: "object"
    properties:
      address:
        type: "string"
      email:
        type: "string"
      id:
        type: "integer"
      name:
        type: "string"
      password:
        type: "string"


    required:
      - address
      - email
      - id
      - name
      - password


  UpdateMechanicResponse:
    type: 'object'
    properties:
      address:
        type: "string"
      email:
        type: "string"
      id:
        type: "integer"
      name:
        type: "string"
      password:
        type: "string"

    
  DeleteMechanic:
    type: 'object'
    properties:
      message:
        type: "string"

  MechanicResponse:
    type: "object"
    properties:
      address:
        type: "string"
      email:
        type: "string"
      id:
        type: "integer"
      name:
        type: "string"
      password:
        type: "string"


#* Customers
  CreateCustomerPayload:
    type: "object"
    properties:
      email:
        type: "string"
      name:
        type: "string"
      phone:
        type: "string"
    required:
      - email
      - name
      - phone


  CreateCustomerResponse:
    type: "object"
    properties:
      email:
        type: "string"
      id:
        type: "integer"
      name:
        type: "string"
      phone:
        type: "string"
      tickets:
        type: "array"
        items:
          type: "integer"
      vehicles:
        type: "array"
        items:
          type: "integer"
    required:
      - email
      - id
      - name
      - phone
      - tickets
      - vehicles


  AllCustomers:
    type: "array"
    properties:
      email:
        type: "string"
      id:
        type: "integer"
      name:
        type: "string"
      phone:
        type: "string"


  UpdateCustomerPayload:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: 'string'
      email:
        type: 'string'
      phone:
        type: 'string'

    required:
      - id
      - name
      - email
      - phone


  UpdateCustomerResponse:
    type: "object"
    properties:
      email:
        type: "string"
      id:
        type: "integer"
      name:
        type: "string"
      phone:
        type: "string"
      tickets:
        type: "array"
        items:
          type: "integer"
      vehicles:
        type: "array"
        items:
          type: "integer"
 
  DeleteCustomer:
    type: 'object'
    properties:
      message:
        type: "string"

  CustomerResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      phone:
        type: "string"
      tickets:
        type: "array"
        items:
          type: "integer"
      vehicles:
        type: "array"
        items:
          type: "integer"

  CustomerListResponse:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        phone:
          type: "string"
        tickets:
          type: "array"
          items:
            type: "integer"
        vehicles:
          type: "array"
          items:
            type: "integer"

#* Part Description
  CreatePart_DescriptionPayload:
    type: "object"
    properties:
      part_name:
        type: "string"
      brand:
        type: "string"
      price:
        type: "string"
    required:
      - part name
      - brand
      - price


  CreatePart_DescriptionResponse:
    type: "object"
    properties:
      brand:
        type: "string"
      id:
        type: "integer"
      part_name:
        type: "string"
      price:
        type: "string"


  AllPart_Descriptions:
    type: "array"
    properties:
      brand:
        type: "string"
      id:
        type: "integer"
      part_name:
        type: "string"
      price:
        type: "string"


  UpdatePart_DescriptionPayload:
    type: "object"
    properties:
      brand:
        type: "string"
      id:
        type: "integer"
      part_name:
        type: "string"
      price:
        type: "string"

    required:
      - brand
      - id
      - part name
      - price


  UpdatePart_DescriptionResponse:
    type: 'object'
    properties:
      brand:
        type: "string"
      id:
        type: "integer"
      part_name:
        type: "string"
      price:
        type: "string"

    
  DeletePart_Description:
    type: 'object'
    properties:
      message:
        type: "string"

  Part_DescriptionResponse:
    type: "object"
    properties:
      brand:
        type: "string"
      id:
        type: "integer"
      part_name:
        type: "string"
      price:
        type: "string"
      serialized_parts:
        type: "array"
        items:
          type: "integer"

#* Serialized Parts
  CreateSerialized_PartPayload:
    type: "object"
    properties:
      desc_id:
        type: "integer"
      ticket_id:
        type: "integer"
    required:
      - desc id
      - ticket id

  CreateSerialized_PartResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      desc_id:
        type: "integer"
      ticket_id:
        type: "integer"
    required:
      - id
      - desc id
      - ticket id


  AllSerialized_Parts:
    type: "array"
    properties:
      id:
        type: "integer"
      desc_id:
        type: "integer"
      ticket_id:
        type: "integer"


  UpdateSerialized_PartPayload:
    type: "object"
    properties:
      desc_id:
        type: "integer"
      ticket_id:
        type: "integer"

    required:
      - desc id
      - ticket id


  UpdateSerialized_PartResponse:
    type: 'object'
    properties:
      id:
        type: "integer"
      desc_id:
        type: "integer"
      ticket_id:
        type: "integer"

    
  DeleteSerialized_Part:
    type: 'object'
    properties:
      message:
        type: "string"

  Serialized_PartResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      desc_id:
        type: "integer"
      ticket_id:
        type: "integer"

#* Service Tickets
  CreateService_TicketPayload:
    type: "object"
    properties:
      date:
        type: "string"
      type:
        type: "string"
      status:
        type: "string"
      customer_id:
        type: "integer"
      vehicle_id:
        type: "integer"

  CreateService_TicketResponse:
    type: "object"
    properties:
      customer_id:
        type: "integer"
      date:
        type: "string"
      id:
        type: "integer"
      status:
        type: "string"
      type:
        type: "string"
      vehicle_id:
        type: "integer"
      

  AllService_Tickets:
    type: "array"
    properties:
      customer_id:
        type: "integer"
      date:
        type: "string"
      id:
        type: "integer"
      status:
        type: "string"
      type:
        type: "string"
      vehicle_id:
        type: "integer"


  UpdateService_TicketPayload:
    type: "object"
    properties:
      id:
        type: "integer"
      date:
        type: "string"
      type:
        type: "string"
      status:
        type: "string"
      customer_id:
        type: "integer"
      vehicle_id:
        type: "integer"
      

    required:
      - id
      - date
      - type
      - status
      - customer_id
      - vehicle_id


  UpdateService_TicketResponse:
    type: "object"
    properties:
      customer_id:
        type: "integer"
      date:
        type: "string"
      id:
        type: "integer"
      status:
        type: "string"
      type:
        type: "string"
      vehicle_id:
        type: "integer"
      
    
  DeleteService_Ticket:
    type: 'object'
    properties:
      message:
        type: "string"

  Service_TicketResponse:
    type: "object"
    properties:
      customer_id:
        type: "integer"
      date:
        type: "string"
        format: "date-time"
      mechanic:
        type: "array"
        items:
          $ref: "#/definitions/Mechanic"
        status:
          type: "string"
        service_type:
          type: "string"
        vehicle_id:
          type: "integer"

  Mechanic_TicketResponse:
    type: "object"
    properties:
      message:
        type: "string"
        example: "successfully added mechanic to the ticket"
      ticket:
        $ref: "#/definitions/Service_TicketResponse"
      mechanics:
        type: "array"
        items:
          $ref: "#/definitions/Mechanic"
              
  RemoveMechanic_TicketResponse:
    type: object
    properties:
      message:
        type: string
        example: "successfully removed Anton Barry from the ticket"
      ticket:
        $ref: "#/definitions/Service_TicketResponse"
      mechanics:
        type: array
        items: 
          $ref: "#/definitions/Mechanic" 


#* Vehicles
  CreateVehiclePayload:
    type: "object"
    properties:
      make:
        type: "string"
      model:
        type: "string"
      customer_id:
        type: "integer"

  CreateVehicleResponse:
    type: "object"
    properties:
      customer_id:
        type: "integer"
      id:
        type: "integer"
      make:
        type: "string"
      model:
        type: "string"
      
      

  AllVehicles:
    type: "array"
    properties:
      customer_id:
        type: "integer"
      id:
        type: "integer"
      make:
        type: "string"
      model:
        type: "string"
      



  UpdateVehiclePayload:
    type: "object"
    properties:
      id:
        type: "integer"
      make:
        type: "string"
      model:
        type: "string"
      customer_id:
        type: "integer"
      

    required:
      - id
      - make
      - model
      - customer_id


  UpdateVehicleResponse:
    type: "object"
    properties:
      customer_id:
        type: "integer"
      id:
        type: "integer"
      make:
        type: "string"
      model:
        type: "string"
      
      
    
  DeleteVehicle:
    type: 'object'
    properties:
      message:
        type: "string"

  VehicleResponse:
    type: "object"
    properties:
      customer_id:
        type: "integer"
      vehicle_id:
        type: "integer"
      make:
        type: "string"
      model:
        type: "string"

  VehicleListResponse:
    type: "array"
    items:
      type: "object"
      properties:
        customer_id:
          type: "integer"
        vehicle_id:
          type: "integer"
        make:
          type: "string"
        model:
          type: "string"